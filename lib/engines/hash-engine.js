/*▄────────────────────▄
  █                    █
  █  Загрузка модулей  █
  █                    █
  ▀────────────────────▀*/
const crypto = require('crypto');
const Engine = require('../engine'); // Базовый класс для всех движков

/*┌─────────────────────────────┐
  │ Импортируем список констант │
  └─────────────────────────────┘*/
const {
    SALT, // Список буферов для обеспечения уникальности каждого дайджеста
} = require('../constants/constants');

/*┌────────────────────────────────────┐
  │ Импортируем структуру полей пакета │
  └────────────────────────────────────┘*/
const {
    PACKETID, // ID-пакета
        HASH, // Хэш-сумма
      PACKET, // Весь пакет
} = require('../constants/packet-structure');

/*▄──────────────────────────────▄
  █                              █
  █  Создает движок хеширования  █
  █                              █
  ▀──────────────────────────────▀*/
module.exports = class HashEngine extends Engine {
/*┌─────────────┐
  │ Конструктор │
  └─────────────┘*/
    constructor(protocol) {
    // Сохраняем ссылку на основной протокол и сохраняем буфер главного ключа
        super(protocol);
    }
    
/*┌────────────────────────────────────────────────┐
  │ Возвращает готовый дайджест (алгоритм SHA-256) │
  └────────────────────────────────────────────────┘*/
    static sha256(...buffers) {
    // Создаем новый дайджест
        const digest = crypto.createHash('sha256');
        
    // Обновляем состояние дайджеста для каждого буфера
        for (const buffer of buffers) digest.update(buffer);
        
    // Возвращаем готовый дайджест
        return digest.digest();
    }
    
/*┌──────────────────────────────────────────────────┐
  │ Возвращает готовый дайджест (алгоритм SHAKE-256) │
  └──────────────────────────────────────────────────┘*/
    static shake256 (outputLength, ...buffers) {
    // Создаем новый дайджест
        const digest = crypto.createHash('shake256', { outputLength });
        
    // Обновляем состояние дайджеста для каждого буфера
        for (const buffer of buffers) digest.update(buffer);
        
    // Возвращаем готовый дайджест
        return digest.digest();
    }
    
/*┌────────────────────────────────────────────┐
  │ Возвращает буфер главного ключа (32 байта) │
  └────────────────────────────────────────────┘*/
    static getMasterKeyBuffer(masterKey) {
        return HashEngine.sha256(
            masterKey, // Главный ключ (строка)
        );
    }
    
/*┌────────────────────────────────────────────────┐
  │ Возвращает буфер одноразового ключа (32 байта) │
  └────────────────────────────────────────────────┘*/
    getKeyBuffer = (hashBuffer) => {
        return HashEngine.sha256(
            this.masterKeyBuffer, // Буфер главного ключа (32 байта)
                      hashBuffer, // Буфер предыдущей хэш-суммы (17 байт)
        );
    }
    
/*┌─────────────────────────────────────────────────┐
  │ Возвращает буфер следующего ID-пакета (17 байт) │
  └─────────────────────────────────────────────────┘*/
    getPacketIdBuffer = (keyBuffer) => {
        return HashEngine.shake256(
            PACKETID.SIZE, // Размер следующего ID-пакета (17 байт)
                keyBuffer, // Буфер одноразового ключа (32 байта)
            SALT.PACKETID, // Дополнительный буфер (1 байт)
        );
    }
    
/*┌─────────────────────────────────────────────────────────────────────┐
  │ Возвращает буфер дайджеста для списка следующих позиций (3016 байт) │
  └─────────────────────────────────────────────────────────────────────┘*/
    getPositionsBuffer = (keyBuffer) => {
    // Определяем размер дайджеста по два байта на каждую позицию (1508 * 2 = 3016 байт)
        const outputLength = PACKET.SIZE * 2;
        
    // Возвращаем готовый дайджест (3016 байт)
        return HashEngine.shake256(
              outputLength, // Размер дайджеста для списка позиций (3016 байт)
                 keyBuffer, // Буфер одноразового ключа (32 байта)
            SALT.POSITIONS, // Дополнительный буфер (1 байт)
        );
    }
    
/*┌──────────────────────────────────────┐
  │ Возвращает буфер хэш-суммы (17 байт) │
  └──────────────────────────────────────┘*/
    getHashBuffer = (lengthBuffer, fragmentBuffer) => {
        return HashEngine.shake256(
                       HASH.SIZE, // Размер хэш-суммы (17 байт)
            this.masterKeyBuffer, // Буфер главного ключа (32 байта)
                    lengthBuffer, // Буфер длины фрагмента (2 байта)
                  fragmentBuffer, // Буфер фрагмента (до 1472 байт)
        );
    }
};
